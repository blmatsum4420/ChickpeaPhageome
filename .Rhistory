otu <- otu %>%
column_to_rownames("Contig")
setwd("C:/Users/Brandon Matsumoto/Documents/Emerson/Ella R/")
library(ape)
library(tidyverse)
library(vegan)
library(tidyverse)
library(reshape2)
library(data.table)
library(ComplexUpset)
library(RColorBrewer)
#Load vOTU coverage table info and reformat
otu <- read.csv("vOTUs_confirmed_us_min10k_coverm_output.tsv", header=T, stringsAsFactors = F, ) # load the table
otu <- otu %>%
column_to_rownames("Contig")
setwd("C:/Users/Brandon Matsumoto/Documents/Emerson/Ella R/")
library(ape)
library(tidyverse)
library(vegan)
library(tidyverse)
library(reshape2)
library(data.table)
library(ComplexUpset)
library(RColorBrewer)
#Load vOTU coverage table info and reformat
otu <- read.csv("vOTUs_confirmed_us_min10k_coverm_output.tsv", header=T, stringsAsFactors = F, ) # load the table
otu <- otu %>%
column_to_rownames("Contig")
setwd("C:/Users/Brandon Matsumoto/Documents/Emerson/Ella R/")
library(ape)
library(tidyverse)
library(vegan)
library(tidyverse)
library(reshape2)
library(data.table)
library(ComplexUpset)
library(RColorBrewer)
#Load vOTU coverage table info and reformat
otu <- read.csv("vOTUs_confirmed_us_min10k_coverm_output.tsv", header=T, stringsAsFactors = F, ) # load the table
otu <- otu %>%
column_to_rownames("Contig")
setwd("C:/Users/Brandon Matsumoto/Documents/GitHub/ChickpeaGang/")
library(ape)
library(tidyverse)
library(vegan)
library(reshape2)
library(data.table)
library(ComplexUpset)
library(RColorBrewer)
library(ggpubr)
library(readxl)
library(tidyr)
library(janitor)
library(dplyr)
library(ggplot2)
#Load vOTU coverage table info and reformat
otu <- read.csv("combinedcoverm_w_paki_10_5_22.csv", header=T, stringsAsFactors = F, ) # load the table
otu <- otu %>%
column_to_rownames("Contig")
otu <- otu[rowSums(otu)> 0, ] # throw out rows (viruses) that don't appear in any sample
# Count vOTUs per sample
temp <- otu %>%
mutate(across(.cols = everything(), ~ case_when(.x > 0 ~ 1, TRUE ~ 0)))
max(colSums(temp)) #26
which(colSums(temp) == 1)
otu_t <- otu %>% # Throw out samples (columns) that have no viruses
t() %>% #transpose the table
data.frame # turn it back from matrix to data frame
otu_t <- otu_t[rowSums(otu_t)> 0, ]
# Load SRA table and Greenlon sup. table 1
sra_run_table <- read.csv("SraRunTable.txt", header=T, stringsAsFactors = F) %>%
select(c("Run", "BioSample"))
iso_to_loc <- read.csv("pnas.1900056116.sd01.csv", stringsAsFactors = F)[,1:38] %>%
dplyr::rename(BioSample = SRA_BioSample)
iso_to_loc <- iso_to_loc %>%
left_join(sra_run_table, by="BioSample") %>%
unique() %>%
remove_rownames() %>%
filter(!is.na(Run))
# Filter the vOTU table to sample that have a country assigned
otu_t_valid <- otu_t %>%
rownames_to_column(var="Run") %>%
left_join(iso_to_loc, by="Run") %>%
filter(Country.of.origin != "") %>% # Throwing out samples without strain specified
filter(!is.na(Country.of.origin)) %>%
filter(!is.na(Run)) %>%
column_to_rownames("Run")
#bar chart updated
#srr_filtered <- rownames(otu_t_valid) #pulling row names from out_t_valid
#srrdf <- as.data.frame(srr_filtered) #outputting rownames as dataframe to manipulate
#colnames(srrdf) <- c("Run")
#srr_smn <- merge(srrdf, sra_run_table,by="Run") #merged srrs that we have with their respective samn names
#srr_smn_geo <- merge(srr_smn, iso_to_loc, by="BioSample")
#bar_chart_data <- select(srr_smn_geo, c("Run.x","BioSample","isolation_source"))
# Create the distance matrix using the Jaccard algorithm (just presence/absence, not caring how high the coverage is)
pco_dist <- vegdist(otu_t_valid[, which(colnames(otu_t_valid) %like% "NZ")], method="jaccard")
pcoa_bray <- pcoa(pco_dist) # Creating the PCoA object
jac_variances <- data.frame(pcoa_bray$values$Relative_eig) %>% # Calculating the coordinates of each sample on a multidimensional PCoA plot
rownames_to_column(var = "PCaxis") %>%
data.frame
pcoa_bray_df <- data.frame(pcoa_bray$vectors) %>% # creating a data frame of the coordinates
rownames_to_column(var = "Run") %>% # Creating a column from the rownames. The rownames are the SRR number
mutate(Run = gsub("\\.Mean", "", Run)) %>% # Removing the .Mean from the end of the SR number
data.frame %>%
left_join(iso_to_loc, by="Run") %>% # Merging with the Greenlon sup. table 1 by Run (SRR...)
filter(Country.of.origin != "") %>% # Throwing out samples without country of origin specified
filter(!is.na(Country.of.origin)) %>%
mutate(Country.of.origin = fct_relevel(Country.of.origin, c("AU", "CA", "US", "TU", "MR", "ET", "IN")))
eigenvalues<-round(jac_variances[,2], digits = 4)*100 # Rounding the variance explained by each PCoA axis to 2 decimals
pcoa_A <- ggplot(pcoa_bray_df) + # Plot the PCoA
geom_point(aes(x = Axis.1, y = Axis.2, color=Country.of.origin), size = 1) +
ylab(paste0('Co 2 ',eigenvalues[2],'%')) + #Extract y axis value from variance
xlab(paste0('Co 1 ',eigenvalues[1],'%')) + #Extract x axis value from variance
ggtitle('vOTU clustering by country') +
coord_fixed(ratio = 1) +
theme_bw() + scale_color_brewer(12, palette="Paired", direction=-1)
#print(ggplot(pcoa_A))######
ggsave(pcoa_A, "Rhizophages_PCoA_Co1_Co2.pdf")
setwd("C:/Users/Brandon Matsumoto/Documents/GitHub/ChickpeaGang/")
library(ape)
library(tidyverse)
library(vegan)
library(reshape2)
library(data.table)
library(ComplexUpset)
library(RColorBrewer)
library(ggpubr)
library(readxl)
library(tidyr)
library(janitor)
library(dplyr)
library(ggplot2)
#Load vOTU coverage table info and reformat
otu <- read.csv("combinedcoverm_w_paki_10_5_22.csv", header=T, stringsAsFactors = F, ) # load the table
otu <- otu %>%
column_to_rownames("Contig")
otu <- otu[rowSums(otu)> 0, ] # throw out rows (viruses) that don't appear in any sample
# Count vOTUs per sample
temp <- otu %>%
mutate(across(.cols = everything(), ~ case_when(.x > 0 ~ 1, TRUE ~ 0)))
max(colSums(temp)) #26
which(colSums(temp) == 1)
otu_t <- otu %>% # Throw out samples (columns) that have no viruses
t() %>% #transpose the table
data.frame # turn it back from matrix to data frame
otu_t <- otu_t[rowSums(otu_t)> 0, ]
# Load SRA table and Greenlon sup. table 1
sra_run_table <- read.csv("SraRunTable.txt", header=T, stringsAsFactors = F) %>%
select(c("Run", "BioSample"))
iso_to_loc <- read.csv("pnas.1900056116.sd01.csv", stringsAsFactors = F)[,1:38] %>%
dplyr::rename(BioSample = SRA_BioSample)
iso_to_loc <- iso_to_loc %>%
left_join(sra_run_table, by="BioSample") %>%
unique() %>%
remove_rownames() %>%
filter(!is.na(Run))
# Filter the vOTU table to sample that have a country assigned
otu_t_valid <- otu_t %>%
rownames_to_column(var="Run") %>%
left_join(iso_to_loc, by="Run") %>%
filter(Country.of.origin != "") %>% # Throwing out samples without strain specified
filter(!is.na(Country.of.origin)) %>%
filter(!is.na(Run)) %>%
column_to_rownames("Run")
#bar chart updated
#srr_filtered <- rownames(otu_t_valid) #pulling row names from out_t_valid
#srrdf <- as.data.frame(srr_filtered) #outputting rownames as dataframe to manipulate
#colnames(srrdf) <- c("Run")
#srr_smn <- merge(srrdf, sra_run_table,by="Run") #merged srrs that we have with their respective samn names
#srr_smn_geo <- merge(srr_smn, iso_to_loc, by="BioSample")
#bar_chart_data <- select(srr_smn_geo, c("Run.x","BioSample","isolation_source"))
# Create the distance matrix using the Jaccard algorithm (just presence/absence, not caring how high the coverage is)
pco_dist <- vegdist(otu_t_valid[, which(colnames(otu_t_valid) %like% "NZ")], method="jaccard")
pcoa_bray <- pcoa(pco_dist) # Creating the PCoA object
jac_variances <- data.frame(pcoa_bray$values$Relative_eig) %>% # Calculating the coordinates of each sample on a multidimensional PCoA plot
rownames_to_column(var = "PCaxis") %>%
data.frame
pcoa_bray_df <- data.frame(pcoa_bray$vectors) %>% # creating a data frame of the coordinates
rownames_to_column(var = "Run") %>% # Creating a column from the rownames. The rownames are the SRR number
mutate(Run = gsub("\\.Mean", "", Run)) %>% # Removing the .Mean from the end of the SR number
data.frame %>%
left_join(iso_to_loc, by="Run") %>% # Merging with the Greenlon sup. table 1 by Run (SRR...)
filter(Country.of.origin != "") %>% # Throwing out samples without country of origin specified
filter(!is.na(Country.of.origin)) %>%
mutate(Country.of.origin = fct_relevel(Country.of.origin, c("AU", "CA", "US", "TU", "MR", "ET", "IN")))
eigenvalues<-round(jac_variances[,2], digits = 4)*100 # Rounding the variance explained by each PCoA axis to 2 decimals
pcoa_A <- ggplot(pcoa_bray_df) + # Plot the PCoA
geom_point(aes(x = Axis.1, y = Axis.2, color=Country.of.origin), size = 1) +
ylab(paste0('Co 2 ',eigenvalues[2],'%')) + #Extract y axis value from variance
xlab(paste0('Co 1 ',eigenvalues[1],'%')) + #Extract x axis value from variance
ggtitle('vOTU clustering by country') +
coord_fixed(ratio = 1) +
theme_bw() + scale_color_brewer(12, palette="Paired", direction=-1)
#print(ggplot(pcoa_A))######
ggsave(pcoa_A, "~/Desktop/Rhizophages_PCoA_Co1_Co2.pdf")
rlang::last_error()
View(pcoa_A)
View(pcoa_A)
setwd("C:/Users/Brandon Matsumoto/Documents/GitHub/ChickpeaGang/")
library(ape)
library(tidyverse)
library(vegan)
library(reshape2)
library(data.table)
library(ComplexUpset)
library(RColorBrewer)
library(ggpubr)
library(readxl)
library(tidyr)
library(janitor)
library(dplyr)
library(ggplot2)
#Load vOTU coverage table info and reformat
otu <- read.csv("combinedcoverm_w_paki_10_5_22.csv", header=T, stringsAsFactors = F, ) # load the table
otu <- otu %>%
column_to_rownames("Contig")
otu <- otu[rowSums(otu)> 0, ] # throw out rows (viruses) that don't appear in any sample
# Count vOTUs per sample
temp <- otu %>%
mutate(across(.cols = everything(), ~ case_when(.x > 0 ~ 1, TRUE ~ 0)))
max(colSums(temp)) #26
which(colSums(temp) == 1)
otu_t <- otu %>% # Throw out samples (columns) that have no viruses
t() %>% #transpose the table
data.frame # turn it back from matrix to data frame
otu_t <- otu_t[rowSums(otu_t)> 0, ]
# Load SRA table and Greenlon sup. table 1
sra_run_table <- read.csv("SraRunTable.txt", header=T, stringsAsFactors = F) %>%
select(c("Run", "BioSample"))
iso_to_loc <- read.csv("pnas.1900056116.sd01.csv", stringsAsFactors = F)[,1:38] %>%
dplyr::rename(BioSample = SRA_BioSample)
iso_to_loc <- iso_to_loc %>%
left_join(sra_run_table, by="BioSample") %>%
unique() %>%
remove_rownames() %>%
filter(!is.na(Run))
# Filter the vOTU table to sample that have a country assigned
otu_t_valid <- otu_t %>%
rownames_to_column(var="Run") %>%
left_join(iso_to_loc, by="Run") %>%
filter(Country.of.origin != "") %>% # Throwing out samples without strain specified
filter(!is.na(Country.of.origin)) %>%
filter(!is.na(Run)) %>%
column_to_rownames("Run")
#bar chart updated
#srr_filtered <- rownames(otu_t_valid) #pulling row names from out_t_valid
#srrdf <- as.data.frame(srr_filtered) #outputting rownames as dataframe to manipulate
#colnames(srrdf) <- c("Run")
#srr_smn <- merge(srrdf, sra_run_table,by="Run") #merged srrs that we have with their respective samn names
#srr_smn_geo <- merge(srr_smn, iso_to_loc, by="BioSample")
#bar_chart_data <- select(srr_smn_geo, c("Run.x","BioSample","isolation_source"))
# Create the distance matrix using the Jaccard algorithm (just presence/absence, not caring how high the coverage is)
pco_dist <- vegdist(otu_t_valid[, which(colnames(otu_t_valid) %like% "NZ")], method="jaccard")
pcoa_bray <- pcoa(pco_dist) # Creating the PCoA object
jac_variances <- data.frame(pcoa_bray$values$Relative_eig) %>% # Calculating the coordinates of each sample on a multidimensional PCoA plot
rownames_to_column(var = "PCaxis") %>%
data.frame
pcoa_bray_df <- data.frame(pcoa_bray$vectors) %>% # creating a data frame of the coordinates
rownames_to_column(var = "Run") %>% # Creating a column from the rownames. The rownames are the SRR number
mutate(Run = gsub("\\.Mean", "", Run)) %>% # Removing the .Mean from the end of the SR number
data.frame %>%
left_join(iso_to_loc, by="Run") %>% # Merging with the Greenlon sup. table 1 by Run (SRR...)
filter(Country.of.origin != "") %>% # Throwing out samples without country of origin specified
filter(!is.na(Country.of.origin)) %>%
mutate(Country.of.origin = fct_relevel(Country.of.origin, c("AU", "CA", "US", "TU", "MR", "ET", "IN")))
eigenvalues<-round(jac_variances[,2], digits = 4)*100 # Rounding the variance explained by each PCoA axis to 2 decimals
pcoa_A <- ggplot(pcoa_bray_df) + # Plot the PCoA
geom_point(aes(x = Axis.1, y = Axis.2, color=Country.of.origin), size = 1) +
ylab(paste0('Co 2 ',eigenvalues[2],'%')) + #Extract y axis value from variance
xlab(paste0('Co 1 ',eigenvalues[1],'%')) + #Extract x axis value from variance
ggtitle('vOTU clustering by country') +
coord_fixed(ratio = 1) +
theme_bw() + scale_color_brewer(12, palette="Paired", direction=-1)
#print(ggplot(pcoa_A))######
plot(pcoa_A)
ggsave(pcoa_A, "Rhizophages_PCoA_Co1_Co2.pdf")
setwd("C:/Users/Brandon Matsumoto/Documents/GitHub/ChickpeaGang/")
library(ape)
library(tidyverse)
library(vegan)
library(reshape2)
library(data.table)
library(ComplexUpset)
library(RColorBrewer)
library(ggpubr)
library(readxl)
library(tidyr)
library(janitor)
library(dplyr)
library(ggplot2)
#Load vOTU coverage table info and reformat
otu <- read.csv("combinedcoverm_w_paki_10_5_22.csv", header=T, stringsAsFactors = F, ) # load the table
otu <- otu %>%
column_to_rownames("Contig")
otu <- otu[rowSums(otu)> 0, ] # throw out rows (viruses) that don't appear in any sample
# Count vOTUs per sample
temp <- otu %>%
mutate(across(.cols = everything(), ~ case_when(.x > 0 ~ 1, TRUE ~ 0)))
max(colSums(temp)) #26
which(colSums(temp) == 1)
otu_t <- otu %>% # Throw out samples (columns) that have no viruses
t() %>% #transpose the table
data.frame # turn it back from matrix to data frame
otu_t <- otu_t[rowSums(otu_t)> 0, ]
# Load SRA table and Greenlon sup. table 1
sra_run_table <- read.csv("SraRunTable.txt", header=T, stringsAsFactors = F) %>%
select(c("Run", "BioSample"))
iso_to_loc <- read.csv("pnas.1900056116.sd01.csv", stringsAsFactors = F)[,1:38] %>%
dplyr::rename(BioSample = SRA_BioSample)
iso_to_loc <- iso_to_loc %>%
left_join(sra_run_table, by="BioSample") %>%
unique() %>%
remove_rownames() %>%
filter(!is.na(Run))
# Filter the vOTU table to sample that have a country assigned
otu_t_valid <- otu_t %>%
rownames_to_column(var="Run") %>%
left_join(iso_to_loc, by="Run") %>%
filter(Country.of.origin != "") %>% # Throwing out samples without strain specified
filter(!is.na(Country.of.origin)) %>%
filter(!is.na(Run)) %>%
column_to_rownames("Run")
#bar chart updated
#srr_filtered <- rownames(otu_t_valid) #pulling row names from out_t_valid
#srrdf <- as.data.frame(srr_filtered) #outputting rownames as dataframe to manipulate
#colnames(srrdf) <- c("Run")
#srr_smn <- merge(srrdf, sra_run_table,by="Run") #merged srrs that we have with their respective samn names
#srr_smn_geo <- merge(srr_smn, iso_to_loc, by="BioSample")
#bar_chart_data <- select(srr_smn_geo, c("Run.x","BioSample","isolation_source"))
# Create the distance matrix using the Jaccard algorithm (just presence/absence, not caring how high the coverage is)
pco_dist <- vegdist(otu_t_valid[, which(colnames(otu_t_valid) %like% "NZ")], method="jaccard")
pcoa_bray <- pcoa(pco_dist) # Creating the PCoA object
jac_variances <- data.frame(pcoa_bray$values$Relative_eig) %>% # Calculating the coordinates of each sample on a multidimensional PCoA plot
rownames_to_column(var = "PCaxis") %>%
data.frame
pcoa_bray_df <- data.frame(pcoa_bray$vectors) %>% # creating a data frame of the coordinates
rownames_to_column(var = "Run") %>% # Creating a column from the rownames. The rownames are the SRR number
mutate(Run = gsub("\\.Mean", "", Run)) %>% # Removing the .Mean from the end of the SR number
data.frame %>%
left_join(iso_to_loc, by="Run") %>% # Merging with the Greenlon sup. table 1 by Run (SRR...)
filter(Country.of.origin != "") %>% # Throwing out samples without country of origin specified
filter(!is.na(Country.of.origin)) %>%
mutate(Country.of.origin = fct_relevel(Country.of.origin, c("AU", "CA", "US", "TU", "MR", "ET", "IN")))
eigenvalues<-round(jac_variances[,2], digits = 4)*100 # Rounding the variance explained by each PCoA axis to 2 decimals
pcoa_A <- ggplot(pcoa_bray_df) + # Plot the PCoA
geom_point(aes(x = Axis.1, y = Axis.2, color=Country.of.origin), size = 1) +
ylab(paste0('Co 2 ',eigenvalues[2],'%')) + #Extract y axis value from variance
xlab(paste0('Co 1 ',eigenvalues[1],'%')) + #Extract x axis value from variance
ggtitle('vOTU clustering by country') +
coord_fixed(ratio = 1) +
theme_bw() + scale_color_brewer(12, palette="Paired", direction=-1)
#print(ggplot(pcoa_A))######
plot(pcoa_A)
ggsave("Rhizophages_PCoA_Co1_Co2.pdf")
# Plotting coordinates 2 and 3
pcoa_B <- ggplot(pcoa_bray_df) + # Plot the PCoA
geom_point(aes(x = Axis.2, y = Axis.3, color=Country.of.origin), size = 1) +
ylab(paste0('Co 3 ',eigenvalues[3],'%')) + #Extract y axis value from variance
xlab(paste0('Co 2 ',eigenvalues[2],'%')) + #Extract x axis value from variance
ggtitle('vOTU clustering by country') +
coord_fixed(ratio = 1) +
theme_bw() + scale_color_brewer(12, palette="Paired", direction=-1)
ggsave(pcoa_B, "Rhizophages_PCoA_Co2_Co3.pdf")
setwd("C:/Users/Brandon Matsumoto/Documents/GitHub/ChickpeaGang/")
library(ape)
library(tidyverse)
library(vegan)
library(reshape2)
library(data.table)
library(ComplexUpset)
library(RColorBrewer)
library(ggpubr)
library(readxl)
library(tidyr)
library(janitor)
library(dplyr)
library(ggplot2)
#Load vOTU coverage table info and reformat
otu <- read.csv("combinedcoverm_w_paki_10_5_22.csv", header=T, stringsAsFactors = F, ) # load the table
otu <- otu %>%
column_to_rownames("Contig")
otu <- otu[rowSums(otu)> 0, ] # throw out rows (viruses) that don't appear in any sample
# Count vOTUs per sample
temp <- otu %>%
mutate(across(.cols = everything(), ~ case_when(.x > 0 ~ 1, TRUE ~ 0)))
max(colSums(temp)) #26
which(colSums(temp) == 1)
otu_t <- otu %>% # Throw out samples (columns) that have no viruses
t() %>% #transpose the table
data.frame # turn it back from matrix to data frame
otu_t <- otu_t[rowSums(otu_t)> 0, ]
# Load SRA table and Greenlon sup. table 1
sra_run_table <- read.csv("SraRunTable.txt", header=T, stringsAsFactors = F) %>%
select(c("Run", "BioSample"))
iso_to_loc <- read.csv("pnas.1900056116.sd01.csv", stringsAsFactors = F)[,1:38] %>%
dplyr::rename(BioSample = SRA_BioSample)
iso_to_loc <- iso_to_loc %>%
left_join(sra_run_table, by="BioSample") %>%
unique() %>%
remove_rownames() %>%
filter(!is.na(Run))
# Filter the vOTU table to sample that have a country assigned
otu_t_valid <- otu_t %>%
rownames_to_column(var="Run") %>%
left_join(iso_to_loc, by="Run") %>%
filter(Country.of.origin != "") %>% # Throwing out samples without strain specified
filter(!is.na(Country.of.origin)) %>%
filter(!is.na(Run)) %>%
column_to_rownames("Run")
#bar chart updated
#srr_filtered <- rownames(otu_t_valid) #pulling row names from out_t_valid
#srrdf <- as.data.frame(srr_filtered) #outputting rownames as dataframe to manipulate
#colnames(srrdf) <- c("Run")
#srr_smn <- merge(srrdf, sra_run_table,by="Run") #merged srrs that we have with their respective samn names
#srr_smn_geo <- merge(srr_smn, iso_to_loc, by="BioSample")
#bar_chart_data <- select(srr_smn_geo, c("Run.x","BioSample","isolation_source"))
# Create the distance matrix using the Jaccard algorithm (just presence/absence, not caring how high the coverage is)
pco_dist <- vegdist(otu_t_valid[, which(colnames(otu_t_valid) %like% "NZ")], method="jaccard")
pcoa_bray <- pcoa(pco_dist) # Creating the PCoA object
jac_variances <- data.frame(pcoa_bray$values$Relative_eig) %>% # Calculating the coordinates of each sample on a multidimensional PCoA plot
rownames_to_column(var = "PCaxis") %>%
data.frame
pcoa_bray_df <- data.frame(pcoa_bray$vectors) %>% # creating a data frame of the coordinates
rownames_to_column(var = "Run") %>% # Creating a column from the rownames. The rownames are the SRR number
mutate(Run = gsub("\\.Mean", "", Run)) %>% # Removing the .Mean from the end of the SR number
data.frame %>%
left_join(iso_to_loc, by="Run") %>% # Merging with the Greenlon sup. table 1 by Run (SRR...)
filter(Country.of.origin != "") %>% # Throwing out samples without country of origin specified
filter(!is.na(Country.of.origin)) %>%
mutate(Country.of.origin = fct_relevel(Country.of.origin, c("AU", "CA", "US", "TU", "MR", "ET", "IN")))
eigenvalues<-round(jac_variances[,2], digits = 4)*100 # Rounding the variance explained by each PCoA axis to 2 decimals
pcoa_A <- ggplot(pcoa_bray_df) + # Plot the PCoA
geom_point(aes(x = Axis.1, y = Axis.2, color=Country.of.origin), size = 1) +
ylab(paste0('Co 2 ',eigenvalues[2],'%')) + #Extract y axis value from variance
xlab(paste0('Co 1 ',eigenvalues[1],'%')) + #Extract x axis value from variance
ggtitle('vOTU clustering by country') +
coord_fixed(ratio = 1) +
theme_bw() + scale_color_brewer(12, palette="Paired", direction=-1)
#print(ggplot(pcoa_A))######
#plot(pcoa_A)
ggsave("Rhizophages_PCoA_Co1_Co2.pdf")
# Plotting coordinates 2 and 3
pcoa_B <- ggplot(pcoa_bray_df) + # Plot the PCoA
geom_point(aes(x = Axis.2, y = Axis.3, color=Country.of.origin), size = 1) +
ylab(paste0('Co 3 ',eigenvalues[3],'%')) + #Extract y axis value from variance
xlab(paste0('Co 2 ',eigenvalues[2],'%')) + #Extract x axis value from variance
ggtitle('vOTU clustering by country') +
coord_fixed(ratio = 1) +
theme_bw() + scale_color_brewer(12, palette="Paired", direction=-1)
#ggsave(pcoa_B, "Rhizophages_PCoA_Co2_Co3.pdf")
ggsave("Rhizophages_PCoA_Co2_Co3.pdf")
# CAP analysis - by country of origin
iso_to_loc_2 <- iso_to_loc  %>%
filter(Run %in% rownames(otu_t_valid)) %>%
column_to_rownames("Run") %>%
mutate(Country.of.origin = fct_relevel(Country.of.origin, c("AU", "CA", "US", "TU", "MR", "ET", "IN")))
cps <- capscale(pco_dist ~ Country.of.origin, data=iso_to_loc_2)
cps_gg <- scores(cps, tidy=T)
iso_to_loc_2 <- iso_to_loc_2 %>%
rownames_to_column("Run")
cps_gg_sites <- cps_gg %>%
filter(score == "sites") %>%
rename(Run = label) %>%
left_join(iso_to_loc_2[,c("Run", "Country.of.origin")], by="Run") %>%
rename(label = Run)
cps_gg_cent <- cps_gg %>%
filter(score == "centroids") %>%
mutate(label = gsub(".*origin", "", label)) %>%
mutate(label = fct_relevel(label, c("AU", "CA", "US", "TU", "MR", "ET", "IN")))
ggplot(data=cps_gg_sites, aes(x=CAP1, y=CAP2)) +
geom_point(aes(color=Country.of.origin)) +
theme_bw() + scale_color_brewer(12, palette="Paired", direction=-1)
# Coloring the PCoA by Mesorhizobium strain
# Filter the vOTU table to sample that have a strain assigned
otu_t_valid <- otu_t %>%
rownames_to_column(var="Run") %>%
left_join(iso_to_loc, by="Run") %>%
filter(ANI95.OTU != "") %>% # Throwing out samples without strain specified
filter(!is.na(ANI95.OTU)) %>%
filter(!is.na(Run)) %>%
unique() %>%
remove_rownames() %>%
column_to_rownames("Run")
# Create the distance matrix using the Jaccard algorithm (just presence/absence, not caring how high the coverage is)
pco_dist <- vegdist(otu_t_valid[, which(colnames(otu_t_valid) %like% "NZ")], method="jaccard")
pcoa_bray <- pcoa(pco_dist) # Creating the PCoA object
jac_variances <- data.frame(pcoa_bray$values$Relative_eig) %>% # Calculating the coordinates of each sample on a multidimensional PCoA plot
rownames_to_column(var = "PCaxis") %>%
data.frame
pcoa_bray_df <- data.frame(pcoa_bray$vectors) %>% # creating a data frame of the coordinates
rownames_to_column(var = "Run") %>% # Creating a column from the rownames. The rownames are the SRR number
mutate(Run = gsub("\\.Mean", "", Run)) %>% # Removing the .Mean from the end of the SR number
data.frame %>%
left_join(sra_run_table, by="Run") %>% # Merging with the SRR to BioSample table by SRR
left_join(iso_to_loc, by="BioSample") %>% # Merging with the Greenlon sup. table 1 by BioSample
filter(ANI95.OTU != "") %>% # Throwing out samples without country of origin specified
filter(!is.na(ANI95.OTU)) %>%
mutate(ANI95.OTU = fct_relevel(ANI95.OTU, c("1A", "1B", "1C", "1D", "1E", "1F", "1G",
"2A", "2B", "2C", "3A", "4A", "4B",
"5A", "5B", "5C", "5D", "6A",
"7A", "7B", "7D",
"8A", "8B", "9A", "10A")))
eigenvalues<-round(jac_variances[,2], digits = 4)*100 # Rounding the variance explained by each PCoA axis to 2 decimals
pcoa_C <- ggplot(pcoa_bray_df) + # Plot the PCoA
geom_point(aes(x = Axis.1, y = Axis.2, color=ANI95.OTU), size = 1) +
ylab(paste0('Co 2 ',eigenvalues[2],'%')) + #Extract y axis value from variance
xlab(paste0('Co 1 ',eigenvalues[1],'%')) + #Extract x axis value from variance
ggtitle('vOTU clustering by strain') +
coord_fixed(ratio = 1) +
theme_bw() + scale_color_manual(values=c(brewer.pal(n=8, "Reds")[-1], brewer.pal(n=7, "YlOrRd")[-1], brewer.pal(n=6, "Greens")[-1], rev(brewer.pal(n=4, "Purples")[-1]), rev(brewer.pal(n=4, "Blues")[-1]), "black"))
ggsave("Rhizophages_PCoA_by_strain_Co1_Co2.pdf")
ggsave(pcoa_B, "Rhizophages_PCoA_Co2_Co3.pdf")
